@startuml
class com.ducks.scenes.Minimap {
- float ratio
+ OrthographicCamera gameCam
- Pixmap pixmap
- float map_width
- float map_height
+ void update(Body)
+ void draw(SpriteBatch)
+ void dispose()
}
class com.ducks.scenes.Hud {
+ Stage stage
+ Viewport viewport
- Integer worldTimer
- float timeCount
- {static} Integer score
- {static} Integer gold
- Label countdownLabel
- {static} Label scoreLabel
- Label timeLabel
- Label levelLabel
- {static} Label goldLabel
- Label playerLabel
+ void update(float)
+ {static} void addScore(int)
+ {static} void setGold(int)
+ float getTimer()
+ void dispose()
}
class com.ducks.tools.Content {
- HashMap<String,Texture> textures
+ void loadTexture(String,String)
+ Texture getTexture(String)
+ void disposeTexture(String)
}
class com.ducks.screens.MainMenuScreen {
- DeltaDucks game
- OrthographicCamera gameCam
- Viewport gamePort
- {static} int PLAY_BUTTON_WIDTH
- {static} int PLAY_BUTTON_HEIGHT
- {static} int EXIT_BUTTON_WIDTH
- {static} int EXIT_BUTTON_HEIGHT
- {static} int PLAY_BUTTON_Y
- {static} int EXIT_BUTTON_Y
- Texture playButtonActive
- Texture exitButtonActive
- int play_button_X
- int exit_button_X
+ void show()
+ void handleInput(float)
+ void update(float)
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.ducks.scenes.Tutorial {
- OrthographicCamera gameCam
- int PIXEL_ARROW_WIDTH
- int PIXEL_ARROW_HEIGHT
- float ARROW_WIDTH
- float ARROW_HEIGHT
- Animation<TextureRegion> arrow
- float stateTime
- float SPAWN_X
- float SPAWN_Y
- Ship player
- BitmapFont font
- FreeTypeFontGenerator generator
- FreeTypeFontGenerator.FreeTypeFontParameter parameter
- GlyphLayout Layout
+ void update(float)
+ void draw(SpriteBatch)
}
class com.ducks.DeltaDucks {
+ {static} int WIDTH
+ {static} int HEIGHT
+ {static} int VIRTUAL_WIDTH
+ {static} int VIRTUAL_HEIGHT
+ {static} float PIXEL_PER_METER
+ {static} short BIT_SEA
+ {static} short BIT_LAND
+ {static} short BIT_PLAYER
+ {static} short BIT_PIRATES
+ {static} short BIT_MONSTERS
+ {static} short BIT_BOUNDARY
+ SpriteBatch batch
+ void create()
+ void render()
+ void dispose()
}
class com.ducks.entities.ListOfMonsters {
- World world
- MainGameScreen screen
- Array<Monsters> monsterBodies
- int NUMBER_OF_MONSTERS
- int SPAWN_X
- int SPAWN_Y
- float SPAWN_RADIUS
+ void spawnMonsters()
+ void update(float)
+ void draw(SpriteBatch)
}
class com.ducks.sprites.Ship {
+ State currentState
+ State previousState
+ World world
+ Body b2body
- TextureRegion shipStand
- Animation<TextureRegion> shipMove
- Animation<TextureRegion> shipAttack
- float stateTimer
- boolean movingUp
- boolean movingRight
- int PIXEL_SHIP_WIDTH
- int PIXEL_SHIP_HEIGHT
- float MULTIPLIER
- int SHIP_WIDTH
- int SHIP_HEIGHT
- int SHIP_SPAWN_X
- int SHIP_SPAWN_Y
- int SPRITE_RADIUS
- float SHIP_FRAME_DURATION
- float VERTICAL_ROLL_TIMER_SWITCH_TIME
- float HORIZONTAL_ROLL_TIMER_SWITCH_TIME
- Animation<TextureRegion>[] rolls
~ int roll
~ float rollVerticalTimer
~ float rollHorizontalTimer
~ float stateTime
- int UP_INDEX
- int DOWN_INDEX
- int LEFT_INDEX
- int RIGHT_INDEX
- int FIRST_INDEX
- int LAST_INDEX
+ void update(float)
+ TextureRegion getFrame(float)
+ State getState()
+ void defineShip()
}
enum com.ducks.sprites.State {
+  STANDING
+  MOVING
+  NORTH
+  SOUTH
+  EAST
+  WEST
+  NORTHEAST
+  NORTHWEST
+  SOUTHEAST
+  SOUTHWEST
}
class com.ducks.screens.MainGameScreen {
~ DeltaDucks game
- OrthographicCamera gameCam
- Viewport gamePort
- Hud hud
- TmxMapLoader mapLoader
- TiledMap map
- MapProperties prop
- OrthogonalTiledMapRenderer renderer
- int mapPixelWidth
- int mapPixelHeight
- World world
- Box2DDebugRenderer b2dr
- Ship player
- ListOfPirates bots
- ListOfMonsters creatures
- Minimap radar
- Crosshair crosshair
- Tutorial tutorial
- Subtitle subtitle
- MyContactListener contactListener
- {static} float ACCELERATION
- {static} float MAX_VELOCITY
+ {static} Content resources
- TextureAtlas atlas
+ TextureAtlas getAtlas()
+ void show()
+ void handleInput(float)
+ void handleTime(float)
+ void update(float)
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.ducks.tools.MyContactListener {
- boolean playerHitsGround
~ Ship player
+ void beginContact(Contact)
+ void endContact(Contact)
+ void preSolve(Contact,Manifold)
+ void postSolve(Contact,ContactImpulse)
+ boolean isPlayerHitsGround()
+ boolean checkCollision(Fixture,Fixture,String,String)
}
class com.ducks.sprites.Crosshair {
- World world
- Ship player
- Animation<TextureRegion> wormIdle
- int PIXEL_WORM_WIDTH
- int PIXEL_WORM_HEIGHT
- float WORM_WIDTH
- float WORM_HEIGHT
- float stateTime
- Vector2 mouseInWorld2D
- Vector3 mouseInWorld3D
- OrthographicCamera gameCam
- float angle
+ void update(float)
}
class com.ducks.scenes.Subtitle {
+ Stage stage
+ Viewport viewport
- String subtitle
- Label subtitleLabel
- FreeTypeFontGenerator generator
- FreeTypeFontGenerator.FreeTypeFontParameter parameter
- float stateTimer
- float tolerateTime
- int state
+ void update(float)
+ void setSubtitle(String)
+ void removeSubtitle()
+ void dispose()
}
class com.ducks.tools.B2WorldCreator {
}
class com.ducks.sprites.Pirates {
+ World world
- Animation<TextureRegion> pirateIdle
- int PIXEL_PIRATE_WIDTH
+ {static} int PIXEL_PIRATE_HEIGHT
- float PIRATE_WIDTH
- float PIRATE_HEIGHT
- float stateTime
- Body pirateBody
+ void update(float)
+ void definePirates(float,float,float)
}
class com.ducks.screens.FinalStorylineScreen {
- DeltaDucks game
- OrthographicCamera gameCam
- Viewport gamePort
- FreeTypeFontGenerator generator
- FreeTypeFontGenerator.FreeTypeFontParameter parameter
- BitmapFont font
- BitmapFont smallFont
- GlyphLayout escLayout
- GlyphLayout Layout
- int state
- float stateTimer
+ void show()
+ void handleInput(float)
+ void update(float)
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.ducks.entities.ListOfPirates {
- World world
- MainGameScreen screen
- Array<Pirates> pirateBodies
- int NUMBER_OF_PIRATES
- int mapPixelWidth
- int mapPixelHeight
- float RADIUS
+ void spawnPirates()
+ void update(float)
+ void draw(SpriteBatch)
}
class com.ducks.screens.InitialStorylineScreen {
- DeltaDucks game
- OrthographicCamera gameCam
- Viewport gamePort
- FreeTypeFontGenerator generator
- FreeTypeFontGenerator.FreeTypeFontParameter parameter
- BitmapFont font
- BitmapFont smallFont
- GlyphLayout escLayout
- GlyphLayout Layout
- int state
+ void show()
+ void handleInput(float)
+ void update(float)
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.ducks.sprites.Monsters {
+ World world
- Animation<TextureRegion> wormIdle
- int PIXEL_WORM_WIDTH
+ {static} int PIXEL_WORM_HEIGHT
- float WORM_WIDTH
- float WORM_HEIGHT
~ float stateTime
+ void update(float)
+ void defineMonster(float,float,float)
}


com.badlogic.gdx.utils.Disposable <|.. com.ducks.scenes.Minimap
com.badlogic.gdx.utils.Disposable <|.. com.ducks.scenes.Hud
com.badlogic.gdx.Screen <|.. com.ducks.screens.MainMenuScreen
com.badlogic.gdx.Game <|-- com.ducks.DeltaDucks
com.badlogic.gdx.graphics.g2d.Sprite <|-- com.ducks.sprites.Ship
com.badlogic.gdx.Screen <|.. com.ducks.screens.MainGameScreen
com.ducks.tools.ContactListener <|.. com.ducks.tools.MyContactListener
com.badlogic.gdx.graphics.g2d.Sprite <|-- com.ducks.sprites.Crosshair
com.badlogic.gdx.utils.Disposable <|.. com.ducks.scenes.Subtitle
com.badlogic.gdx.graphics.g2d.Sprite <|-- com.ducks.sprites.Pirates
com.badlogic.gdx.Screen <|.. com.ducks.screens.FinalStorylineScreen
com.badlogic.gdx.Screen <|.. com.ducks.screens.InitialStorylineScreen
com.badlogic.gdx.graphics.g2d.Sprite <|-- com.ducks.sprites.Monsters
@enduml